plugins {
    id 'java-library'
    id 'maven-publish'
    id "jacoco"
    id "org.sonarqube" version "6.2.0.5505"
}

def snakeYamlVersion = project.findProperty('snakeYamlVersion') ?: '1.14'
def isV1 = snakeYamlVersion.startsWith('1.')

static def getVersionFromGit() {
    try {
        def gitRef = null

        if (System.getenv('GIT_BRANCH')) {
            gitRef = System.getenv('GIT_BRANCH')
        } else if (System.getenv('GITHUB_ACTIONS') == 'true') {
            gitRef = System.getenv('GITHUB_REF')
        }

        def isTagBuild = gitRef?.startsWith('refs/tags/')
        if (isTagBuild) {
            return gitRef.replaceAll('refs/tags/v?', '').replaceAll('^v', '')
        }

        def latestTag = 'git describe --tags --abbrev=0'.execute().text.trim()
        if (latestTag.isEmpty()) {
            return "0.0.1-SNAPSHOT"
        }

        def baseVersion = latestTag.replaceAll('^v', '')
        def nextVersion = incrementVersion(baseVersion)

        return "${nextVersion}-SNAPSHOT"
    } catch (Exception ignored) {
        return "0.0.1-SNAPSHOT"
    }
}

static def incrementVersion(String version) {
    def parts = version.split('\\.').collect { it as Integer }

    // Pad to 3 parts if needed
    while (parts.size() < 3) {
        parts.add(0)
    }

    // Increment patch
    parts[2] += 1

    // Handle carries from right to left
    for (int i = parts.size() - 1; i > 0; i--) {
        if (parts[i] > 9) {
            parts[i - 1] += parts[i].intdiv(10)
            parts[i] = parts[i] % 10
        }
    }

    return parts.join('.')
}

version = getVersionFromGit()

// Project Information Dump
gradle.projectsEvaluated {
    println "=" * 60
    println "PROJECT INFORMATION"
    println "=" * 60
    println "Name: ${project.name}"
    println "Group: ${project.group}"
    println "Version: ${project.version}"
    println "SnakeYAML Version: ${snakeYamlVersion}"
    println "Using V1 API: ${isV1}"
    println "Env/GIT_BRANCH: ${System.getenv('GIT_BRANCH') ?: 'N/A'}"
    println "Env/GITHUB_REF: ${System.getenv('GITHUB_REF') ?: 'N/A'}"
    println "Project Dir: ${project.projectDir}"
    println "Build Dir: ${layout.buildDirectory.get()}"
    println "Java Source: ${java.sourceCompatibility}"
    println "Java Target: ${java.targetCompatibility}"
    println "Gradle Version: ${gradle.gradleVersion}"
    println "Java Version: ${System.getProperty('java.version')}"
    println "Source Sets: ${sourceSets.names.join(', ')}"
    println "Publications: ${publishing.publications.names.join(', ')}"
    println "=" * 60
    println ""
//    println "=" * 60
//    println "ENVIRONMENT VARIABLES"
//    println "=" * 60
//    System.getenv().sort().each { key, value ->
//        println "${key}: ${value}"
//    }
//    println "=" * 60
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
    withSourcesJar()
}

sourceSets {
    main.java.srcDirs = []
    common.java.srcDir 'src/main/java'
    v1 {
        java.srcDir 'src/main/java-v1'
        compileClasspath += sourceSets.common.output
    }
    v2 {
        java.srcDir 'src/main/java-v2'
        compileClasspath += sourceSets.common.output
    }
    test {
        java.srcDir 'src/test/java'

        compileClasspath += sourceSets.common.output
        compileClasspath += sourceSets.v1.output
        compileClasspath += sourceSets.v2.output

        runtimeClasspath += sourceSets.common.output
        runtimeClasspath += sourceSets.v1.output
        runtimeClasspath += sourceSets.v2.output
    }
}

configurations {
    commonImplementation
    v1Implementation.extendsFrom commonImplementation
    v2Implementation.extendsFrom commonImplementation
    v1CompileOnly
    v2CompileOnly
    testImplementation
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:-options"]
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    v1CompileOnly 'org.yaml:snakeyaml:1.14'
    v2CompileOnly 'org.yaml:snakeyaml:2.2'

    runtimeOnly "org.yaml:snakeyaml:${snakeYamlVersion}"
    testRuntimeOnly "org.yaml:snakeyaml:${snakeYamlVersion}"

    commonImplementation 'org.jetbrains:annotations:26.0.2'
    testImplementation 'org.jetbrains:annotations:26.0.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    from sourceSets.common.output
    from sourceSets.v1.output
    from sourceSets.v2.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/report-' + snakeYamlVersion + '.xml')
        html.required = false
    }
    sourceDirectories = files(sourceSets.common.allJava.srcDirs, isV1 ? sourceSets.v1.allJava.srcDirs : sourceSets.v2.allJava.srcDirs)
    classDirectories = files(sourceSets.common.output, isV1 ? sourceSets.v1.output : sourceSets.v2.output)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
    repositories {
        maven {
            url = "https://repo.codemc.io/repository/avarionmc/"

            def mavenUsername = System.getenv("JENKINS_USERNAME")
            def mavenPassword = System.getenv("JENKINS_PASSWORD")

            if (mavenUsername != null && mavenPassword != null) {
                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
        }
    }
}

sonar {
    properties {
        property "sonar.scm.disabled", "true"
        property "sonar.java.binaries", "${layout.buildDirectory.get()}/classes"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
        property "sonar.verbose", "true"

        property "sonar.cpd.exclusions", "**/YamlWrapperImpl.java"

        property "sonar.projectKey", "AvarionMC_yaml"
        property "sonar.organization", "avarionmc"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property "sonar.coverage.jacoco.xmlReportPaths", [
                "${layout.buildDirectory.get()}/reports/jacoco/report-1.14.xml",
                "${layout.buildDirectory.get()}/reports/jacoco/report-1.33.xml",
                "${layout.buildDirectory.get()}/reports/jacoco/report-2.2.xml",
                "${layout.buildDirectory.get()}/reports/jacoco/report-2.4.xml"
        ].join(',')
    }
}