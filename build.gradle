plugins {
    id 'java-library'
    id 'maven-publish'
    id "jacoco"
    id "org.sonarqube" version "5.1.0.4882"
}


def snakeYamlVersion = project.findProperty('snakeYamlVersion') ?: '1.14'
def isV1 = snakeYamlVersion.startsWith('1.')


java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

sourceSets {
    main {
        java.srcDirs = []
        resources.srcDirs = []
    }
    common {
        java {
            srcDir 'src/main/java'
        }
    }
    v1 {
        java {
            srcDir 'src/main/java-v1'
        }
        compileClasspath += sourceSets.common.output
    }
    v2 {
        java {
            srcDir 'src/main/java-v2'
        }
        compileClasspath += sourceSets.common.output
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }

        compileClasspath += sourceSets.common.output
        compileClasspath += sourceSets.v1.output
        compileClasspath += sourceSets.v2.output

        runtimeClasspath += sourceSets.common.output
        runtimeClasspath += sourceSets.v1.output
        runtimeClasspath += sourceSets.v2.output
    }
}

configurations {
    commonImplementation
    v1Implementation.extendsFrom commonImplementation
    v2Implementation.extendsFrom commonImplementation
    v1CompileOnly
    v2CompileOnly
    testImplementation
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:-options"]
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    v1CompileOnly 'org.yaml:snakeyaml:1.14'
    v2CompileOnly 'org.yaml:snakeyaml:2.2'

    runtimeOnly "org.yaml:snakeyaml:${snakeYamlVersion}"
    testRuntimeOnly "org.yaml:snakeyaml:${snakeYamlVersion}"

    commonImplementation 'org.jetbrains:annotations:26.0.1'

    testImplementation sourceSets.common.output
    testImplementation sourceSets.v1.output
    testImplementation sourceSets.v2.output

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    from sourceSets.common.output
    from sourceSets.v1.output
    from sourceSets.v2.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    dependsOn sourceSets.v1.output, sourceSets.v2.output

    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }

    sourceDirectories.setFrom files(
            sourceSets.common.allJava.srcDirs,
            isV1 ? sourceSets.v1.allJava.srcDirs : sourceSets.v2.allJava.srcDirs
    )
    classDirectories.setFrom files(
            sourceSets.common.output,
            isV1 ? sourceSets.v1.output : sourceSets.v2.output
    )
}

sonar {
    properties {
        property "sonar.projectKey", "AvarionMC_yaml"
        property "sonar.organization", "avarionmc"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

test.doFirst {
    println "Test classpath:"
    test.classpath.each { println it }
}